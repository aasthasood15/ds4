import java.util.*;
class liswap
{
    Node head;


    class Node
    {
        int data;
        Node next;
        Node(int d) {data = d; next = null; }
    }

    void pairWiseSwap()
    {
        Node temp = head;


        while (temp != null && temp.next != null) {


            int k = temp.data;
            temp.data = temp.next.data;
            temp.next.data = k;
            temp = temp.next.next;
         }
    }



    public void push(int new_data)
    {

        Node new_node = new Node(new_data);


        new_node.next = head;


        head = new_node;
    }


    void printList()
    {
        Node temp = head;
        while (temp != null)
        {
           System.out.print(temp.data+" ");
           temp = temp.next;
        }
        System.out.println();
    }


    public static void main(String args[])
    {
        liswap llist = new liswap();


        llist.push(5);
        llist.push(4);
        llist.push(3);
        llist.push(2);
        llist.push(1);

        System.out.println("Linked List before calling pairWiseSwap() ");
        llist.printList();

        llist.pairWiseSwap();

        System.out.println("Linked List after calling pairWiseSwap() ");
        llist.printList();
    }
}

///////////////////////////////////////////////////////////////////////
2
import java.util.*;
class dupl {

    static Node head;

    static class Node {

        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }
    void remove_duplicates() {
        Node ptr1 = null, ptr2 = null, dup = null;
        ptr1 = head;


        while (ptr1 != null && ptr1.next != null) {
            ptr2 = ptr1;


            while (ptr2.next != null) {


                if (ptr1.data == ptr2.next.data) {


                    dup = ptr2.next;
                    ptr2.next = ptr2.next.next;
                    System.gc();
                }
                else
                {
                    ptr2 = ptr2.next;
                }
            }
            ptr1 = ptr1.next;
        }
    }

    void printList(Node node) {
        while (node != null) {
            System.out.println(node.data + " ");
            node = node.next;
        }
    }

    public static void main(String[] args) {
        dupl list = new dupl();
        list.head = new Node(10);
        list.head.next = new Node(12);
        list.head.next.next = new Node(11);
        list.head.next.next.next = new Node(11);
        list.head.next.next.next.next = new Node(12);
        list.head.next.next.next.next.next = new Node(11);
        list.head.next.next.next.next.next.next = new Node(10);

        System.out.println("Linked List before removing duplicates : \n ");
        list.printList(head);

        list.remove_duplicates();
        System.out.println("");
        System.out.println("Linked List after removing duplicates : \n ");
        list.printList(head);
    }
}

////////////////////////////////////////////////////////////////////////////////
3

import java.util.*;
public class limerge
{

    private static class Node {
        private int data;
        Node next;

        public Node(int data) {
            this.data = data;
            next = null;
        }
    }

    Node head;

    public static void main(String[] args) {
        limerge list = new limerge();

        int[] data1 = { 10, 30, 50 };
        Node head1 = new Node(data1[0]);
        for (int i = 1; i < data1.length; i++)
            list.push(head1, data1[i]);
        System.out.println("First List : ");
        list.display(head1);

        int[] data2 = { 20, 40, 60 };
        Node head2 = new Node(data2[0]);
        for (int count = 1; count < data2.length; count++)
            list.push(head2, data2[count]);
        System.out.println("Second List : ");
        list.display(head2);

        Node n = list.mergeSortedLists(head1, head2);
        System.out.println("Merged List : ");
        list.display(n);
    }

    public Node mergeSortedLists(Node first, Node second) {
        Node head;
        if (first == null)
            return second;
        else if (second == null)
            return first;
        else if (first.data < second.data) {
            head = first;
            head.next = mergeSortedLists(first.next, second);
        } else {
            head = second;
            head.next = mergeSortedLists(first, second.next);
        }
        return head;
    }

    public void push(Node head, int n) {
        while (head.next != null)
            head = head.next;
        head.next = new Node(n);
    }

    public void display(Node head) {
        Node tempDisplay = head;
        while (tempDisplay != null) {
            System.out.println(tempDisplay.data);
            tempDisplay = tempDisplay.next;
        }
    }

}
/////////////////////////////////////////////////////////////////////
4
import java.util.*;
class Node {
    Node next;
    int data;

    public Node(int value) {
        data = value;
    }
}

public class lipalind {

        static Node reverse(Node head) {

            Node prev = null;
            Node current = head;
            Node next;
            while (current != null) {
                next = current.next;
                current.next = prev;
                prev = current;
                current = next;
            }
            head = prev;
            return head;
        }

        static public boolean isPalindrome(Node head) {

            Node current = head;
            int length = 0;


            while (current != null) {
                current = current.next;
                length++;
            }

            int mid = length % 2 == 0 ? length / 2 + 1 : length / 2 + 2;

            int idx = mid;
            current = head;


            while (idx > 1) {
                current = current.next;
                idx--;
            }

            Node head1 = reverse(current);

            boolean isPalindrome = true;
            idx = length / 2;
            current = head;


            while (idx > 0) {

                if (current.data != head1.data) {
                    isPalindrome = false;
                    break;
                }
                current = current.next;
                head1 = head1.next;
                idx--;
            }

            return isPalindrome;
        }

        public static void main(String[] args) {

            Node head = new Node(1);
            head.next = new Node(2);
            head.next.next = new Node(3);
            head.next.next.next = new Node(2);
            head.next.next.next.next = new Node(1);

            System.out.println(isPalindrome(head));
        }
    }
//////////////////////////////////////////////////////////////////
5
import java.util.*;
class node
{
 node head = null;
 int data;
 node next;
public node()
{
 this.data=0;
 this.next= null;
}
public node(int data1)
{
 this.data=data1;
 this.next= null;
}

public node add(int data)
{
  node a = new node(data);
  if(head == null)
{
head=a;
}
else
{
 node temp = head;
   while(temp.next!=null) //tb tak chlega jb tk use next me null nahi mil jata.
{
 temp=temp.next;
}

temp.next=a;
}
return head;
}
public node reverse(node d1)
{
   node a1 = new node();
   node prev=null;
   node curr=d1;
   node next=null;
   while(curr!=null)
   {
   	 next=curr.next;
   	 curr.next=prev;
   	 prev=curr;
   	 curr=next;

   }
   d1=prev;
   return d1;
}

public void printlist(node head)
{
 node temp=head;
while(temp!=null)
{


 System.out.print(temp.data);
 System.out.println();
temp=temp.next;
}
}
}

public class revli
{
public static void main(String[] args)
{
node l = new node();
 Scanner in = new Scanner(System.in);
 int d;
 d = in.nextInt();
 node h=null;
 while(d!=0)
{
int n=in.nextInt();
 h=l.add(n);
 d--;
}
 System.out.println("Answer is");

//l.printlist(h);
 h =l.reverse(h);
  l.printlist(h);



}
}
//////////////////////////////////////////////////////////////////////////////////
6
class liodd
{
    Node head;


    class Node
    {
        int data;
        Node next;
        Node(int d)
        {
            data = d;
            next = null;
        }
    }

    void segregateEvenOdd()
    {
        Node end = head;
        Node prev = null;
        Node curr = head;


        while (end.next != null)
            end = end.next;

        Node new_end = end;


        while (curr.data %2 !=0 && curr != end)
        {
            new_end.next = curr;
            curr = curr.next;
            new_end.next.next = null;
            new_end = new_end.next;
        }
        if (curr.data %2 ==0)
        {
            head = curr;
            while (curr != end)
            {
                if (curr.data % 2 == 0)
                {
                    prev = curr;
                    curr = curr.next;
                }
                else
                {
                    prev.next = curr.next;
                    curr.next = null;
                    new_end.next = curr;
                    new_end = curr;
                    curr = prev.next;
                }
            }
        }
        else prev = curr;

        if (new_end != end && end.data %2 != 0)
        {
            prev.next = end.next;
            end.next = null;
            new_end.next = end;
        }
    }
    void push(int new_data)
    {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }
    void printList()
    {
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
        System.out.println();
    }


    public static void main(String args[])
    {
        liodd llist = new liodd();
        llist.push(11);
        llist.push(10);
        llist.push(15);
        llist.push(19);
        llist.push(8);
        llist.push(6);
        llist.push(3);
        llist.push(2);
        llist.push(0);
        System.out.println("Origional Linked List");
        llist.printList();

        llist.segregateEvenOdd();

        System.out.println("Modified Linked List");
        llist.printList();
    }
}